import { Token, Tokens, TokenType, TokenManagerOptions } from './types';
export declare const EVENT_EXPIRED = "expired";
export declare const EVENT_RENEWED = "renewed";
export declare const EVENT_ADDED = "added";
export declare const EVENT_REMOVED = "removed";
export declare const EVENT_ERROR = "error";
export declare class TokenManager {
    get: (key: string) => Promise<Token>;
    add: (key: string, token: Token) => void;
    clear: () => void;
    remove: (key: string) => void;
    renew: (key: string) => Promise<Token>;
    on: (event: string, handler: Function, context?: object) => void;
    off: (event: string, handler: Function) => void;
    hasExpired: (token: Token) => boolean;
    getTokens: () => Promise<Tokens>;
    setTokens: (tokens: Tokens) => void;
    _getStorageKeyByType: (type: TokenType) => string;
    _clearExpireEventTimeoutAll: () => void;
    _getOptions: () => TokenManagerOptions;
    _resetExpireEventTimeoutAll: () => void;
    _emitEventsForCrossTabsStorageUpdate: (newValue: string, oldValue: string) => void;
    constructor(sdk: any, options: TokenManagerOptions);
}
