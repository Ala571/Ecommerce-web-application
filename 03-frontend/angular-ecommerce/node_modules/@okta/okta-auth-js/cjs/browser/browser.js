"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.default = void 0;

var _OktaAuthBase = _interopRequireDefault(require("../OktaAuthBase"));

var features = _interopRequireWildcard(require("./features"));

var _fetchRequest = _interopRequireDefault(require("../fetch/fetchRequest"));

var _browserStorage = _interopRequireDefault(require("./browserStorage"));

var _util = require("../util");

var _builderUtil = require("../builderUtil");

var _constants = require("../constants");

var _session = require("../session");

var _token = require("../token");

var _TokenManager = require("../TokenManager");

var _oauthUtil = require("../oauthUtil");

var _http = _interopRequireDefault(require("../http"));

var _PromiseQueue = _interopRequireDefault(require("../PromiseQueue"));

var _fingerprint = _interopRequireDefault(require("./fingerprint"));

var _tx = require("../tx");

var _AuthStateManager = require("../AuthStateManager");

/*!
 * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

/* eslint-disable complexity */

/* eslint-disable max-statements */

/* SDK_VERSION is defined in webpack config */

/* global SDK_VERSION */
const Emitter = require('tiny-emitter');

function getCookieSettings(sdk, args) {
  // Secure cookies will be automatically used on a HTTPS connection
  // Non-secure cookies will be automatically used on a HTTP connection
  // secure option can override the automatic behavior
  var cookieSettings = args.cookies || {};

  if (typeof cookieSettings.secure === 'undefined') {
    cookieSettings.secure = sdk.features.isHTTPS();
  }

  if (typeof cookieSettings.sameSite === 'undefined') {
    cookieSettings.sameSite = cookieSettings.secure ? 'none' : 'lax';
  } // If secure=true, but the connection is not HTTPS, set secure=false.


  if (cookieSettings.secure && !sdk.features.isHTTPS()) {
    // eslint-disable-next-line no-console
    (0, _util.warn)('The current page is not being served with the HTTPS protocol.\n' + 'For security reasons, we strongly recommend using HTTPS.\n' + 'If you cannot use HTTPS, set "cookies.secure" option to false.');
    cookieSettings.secure = false;
  } // Chrome >= 80 will block cookies with SameSite=None unless they are also Secure
  // If sameSite=none, but the connection is not HTTPS, set sameSite=lax.


  if (cookieSettings.sameSite === 'none' && !cookieSettings.secure) {
    cookieSettings.sameSite = 'lax';
  }

  return cookieSettings;
}

class OktaAuthBrowser extends _OktaAuthBase.default {
  constructor(args) {
    super(Object.assign({
      httpRequestClient: _fetchRequest.default,
      storageUtil: _browserStorage.default
    }, args));
    this._pending = {
      handleLogin: false
    };
    this.options = Object.assign(this.options, {
      clientId: args.clientId,
      authorizeUrl: (0, _util.removeTrailingSlash)(args.authorizeUrl),
      userinfoUrl: (0, _util.removeTrailingSlash)(args.userinfoUrl),
      revokeUrl: (0, _util.removeTrailingSlash)(args.revokeUrl),
      logoutUrl: (0, _util.removeTrailingSlash)(args.logoutUrl),
      pkce: args.pkce === false ? false : true,
      redirectUri: (0, _util.toAbsoluteUrl)(args.redirectUri, window.location.origin),
      postLogoutRedirectUri: args.postLogoutRedirectUri,
      responseMode: args.responseMode,
      responseType: args.responseType,
      transformErrorXHR: args.transformErrorXHR,
      cookies: getCookieSettings(this, args),
      scopes: args.scopes,
      transformAuthState: args.transformAuthState,
      restoreOriginalUri: args.restoreOriginalUri
    });
    this.userAgent = (0, _builderUtil.getUserAgent)(args, `okta-auth-js/${SDK_VERSION}`); // Digital clocks will drift over time, so the server
    // can misalign with the time reported by the browser.
    // The maxClockSkew allows relaxing the time-based
    // validation of tokens (in seconds, not milliseconds).
    // It currently defaults to 300, because 5 min is the
    // default maximum tolerance allowed by Kerberos.
    // (https://technet.microsoft.com/en-us/library/cc976357.aspx)

    if (!args.maxClockSkew && args.maxClockSkew !== 0) {
      this.options.maxClockSkew = _constants.DEFAULT_MAX_CLOCK_SKEW;
    } else {
      this.options.maxClockSkew = args.maxClockSkew;
    }

    this.session = {
      close: _session.closeSession.bind(null, this),
      exists: _session.sessionExists.bind(null, this),
      get: _session.getSession.bind(null, this),
      refresh: _session.refreshSession.bind(null, this),
      setCookieAndRedirect: _session.setCookieAndRedirect.bind(null, this)
    };
    this._tokenQueue = new _PromiseQueue.default();
    this.token = {
      prepareTokenParams: _token.prepareTokenParams.bind(null, this),
      exchangeCodeForTokens: _token.exchangeCodeForTokens.bind(null, this),
      getWithoutPrompt: _token.getWithoutPrompt.bind(null, this),
      getWithPopup: _token.getWithPopup.bind(null, this),
      getWithRedirect: _token.getWithRedirect.bind(null, this),
      parseFromUrl: _token.parseFromUrl.bind(null, this),
      decode: _token.decodeToken,
      revoke: _token.revokeToken.bind(null, this),
      renew: _token.renewToken.bind(null, this),
      renewTokens: _token.renewTokens.bind(null, this),
      getUserInfo: _token.getUserInfo.bind(null, this),
      verify: _token.verifyToken.bind(null, this),
      isLoginRedirect: _oauthUtil.isLoginRedirect.bind(null, this)
    }; // Wrap all async token API methods using MethodQueue to avoid issues with concurrency

    const syncMethods = ['decode', 'isLoginRedirect'];
    Object.keys(this.token).forEach(key => {
      if (syncMethods.indexOf(key) >= 0) {
        // sync methods should not be wrapped
        return;
      }

      var method = this.token[key];
      this.token[key] = _PromiseQueue.default.prototype.push.bind(this._tokenQueue, method, null);
    });
    Object.assign(this.token.getWithRedirect, {
      // This is exposed so we can set window.location in our tests
      _setLocation: function (url) {
        window.location = url;
      }
    });
    Object.assign(this.token.parseFromUrl, {
      // This is exposed so we can mock getting window.history in our tests
      _getHistory: function () {
        return window.history;
      },
      // This is exposed so we can mock getting window.location in our tests
      _getLocation: function () {
        return window.location;
      },
      // This is exposed so we can mock getting window.document in our tests
      _getDocument: function () {
        return window.document;
      }
    }); // Fingerprint API

    this.fingerprint = _fingerprint.default.bind(null, this);
    this.emitter = new Emitter();
    this.tokenManager = new _TokenManager.TokenManager(this, args.tokenManager);
    this.authStateManager = new _AuthStateManager.AuthStateManager(this);
  }
  /**
   * Alias method of signInWithCredentials
   * 
   * @todo This method is deprecated. Remove it in 5.0
   */


  signIn(opts) {
    if (this.features.isLocalhost()) {
      (0, _util.deprecate)('This method has been deprecated, please use signInWithCredentials() instead.');
    }

    return this.signInWithCredentials(opts);
  }

  signInWithCredentials(opts) {
    opts = (0, _util.clone)(opts || {});

    const _postToTransaction = options => {
      delete opts.sendFingerprint;
      return (0, _tx.postToTransaction)(this, '/api/v1/authn', opts, options);
    };

    if (!opts.sendFingerprint) {
      return _postToTransaction();
    }

    return this.fingerprint().then(function (fingerprint) {
      return _postToTransaction({
        headers: {
          'X-Device-Fingerprint': fingerprint
        }
      });
    });
  }

  async signInWithRedirect({
    originalUri,
    ...additionalParams
  } = {}) {
    if (this._pending.handleLogin) {
      // Don't trigger second round
      return;
    }

    this._pending.handleLogin = true;

    try {
      // Trigger default signIn redirect flow
      if (originalUri) {
        this.setOriginalUri(originalUri);
      }

      const params = Object.assign({
        // TODO: remove this line when default scopes are changed OKTA-343294
        scopes: this.options.scopes || ['openid', 'email', 'profile']
      }, additionalParams);
      await this.token.getWithRedirect(params);
    } finally {
      this._pending.handleLogin = false;
    }
  } // Ends the current Okta SSO session without redirecting to Okta.


  closeSession() {
    // Clear all local tokens
    this.tokenManager.clear();
    return this.session.close() // DELETE /api/v1/sessions/me
    .catch(function (e) {
      if (e.name === 'AuthApiError' && e.errorCode === 'E0000007') {
        // Session does not exist or has already been closed
        return;
      }

      throw e;
    });
  } // Revokes the access token for the application session


  async revokeAccessToken(accessToken) {
    if (!accessToken) {
      accessToken = (await this.tokenManager.getTokens()).accessToken;

      const accessTokenKey = this.tokenManager._getStorageKeyByType('accessToken');

      this.tokenManager.remove(accessTokenKey);
    } // Access token may have been removed. In this case, we will silently succeed.


    if (!accessToken) {
      return Promise.resolve();
    }

    return this.token.revoke(accessToken);
  } // Revokes the refresh token for the application session


  async revokeRefreshToken(refreshToken) {
    if (!refreshToken) {
      refreshToken = (await this.tokenManager.getTokens()).refreshToken;

      const refreshTokenKey = this.tokenManager._getStorageKeyByType('refreshToken');

      this.tokenManager.remove(refreshTokenKey);
    } // Refresh token may have been removed. In this case, we will silently succeed.


    if (!refreshToken) {
      return Promise.resolve();
    }

    return this.token.revoke(refreshToken);
  } // Revokes refreshToken or accessToken, clears all local tokens, then redirects to Okta to end the SSO session.


  async signOut(options) {
    options = Object.assign({}, options); // postLogoutRedirectUri must be whitelisted in Okta Admin UI

    var defaultUri = window.location.origin;
    var currentUri = window.location.href;
    var postLogoutRedirectUri = options.postLogoutRedirectUri || this.options.postLogoutRedirectUri || defaultUri;
    var accessToken = options.accessToken;
    var refreshToken = options.refreshToken;
    var revokeAccessToken = options.revokeAccessToken !== false;
    var idToken = options.idToken;
    var logoutUrl = (0, _oauthUtil.getOAuthUrls)(this).logoutUrl;

    if (typeof idToken === 'undefined') {
      idToken = (await this.tokenManager.getTokens()).idToken;
    }

    if (revokeAccessToken && typeof refreshToken === 'undefined') {
      refreshToken = (await this.tokenManager.getTokens()).refreshToken;
    }

    if (revokeAccessToken && typeof accessToken === 'undefined') {
      accessToken = (await this.tokenManager.getTokens()).accessToken;
    } // Clear all local tokens


    this.tokenManager.clear();

    if (revokeAccessToken && refreshToken) {
      await this.revokeRefreshToken(refreshToken);
    }

    if (revokeAccessToken && accessToken) {
      await this.revokeAccessToken(accessToken);
    } // No idToken? This can happen if the storage was cleared.
    // Fallback to XHR signOut, then simulate a redirect to the post logout uri


    if (!idToken) {
      return this.closeSession() // can throw if the user cannot be signed out
      .then(function () {
        if (postLogoutRedirectUri === currentUri) {
          window.location.reload(); // force a hard reload if URI is not changing
        } else {
          window.location.assign(postLogoutRedirectUri);
        }
      });
    } // logout redirect using the idToken.


    var state = options.state;
    var idTokenHint = idToken.idToken; // a string

    var logoutUri = logoutUrl + '?id_token_hint=' + encodeURIComponent(idTokenHint) + '&post_logout_redirect_uri=' + encodeURIComponent(postLogoutRedirectUri); // State allows option parameters to be passed to logout redirect uri

    if (state) {
      logoutUri += '&state=' + encodeURIComponent(state);
    }

    window.location.assign(logoutUri);
  }

  webfinger(opts) {
    var url = '/.well-known/webfinger' + (0, _util.toQueryString)(opts);
    var options = {
      headers: {
        'Accept': 'application/jrd+json'
      }
    };
    return _http.default.get(this, url, options);
  } //
  // Common Methods from downstream SDKs
  //


  async isAuthenticated(timeout) {
    const authState = this.authStateManager.getAuthState();

    if (!authState.isPending) {
      return Promise.resolve(authState.isAuthenticated);
    }

    let clear, handler, timeoutId;
    return new Promise(resolve => {
      clear = () => {
        this.authStateManager.unsubscribe(handler);
        clearTimeout(timeoutId);
      };

      handler = ({
        isAuthenticated,
        isPending
      }) => {
        if (!isPending) {
          resolve(isAuthenticated);
          clear();
        }
      };

      timeoutId = setTimeout(() => {
        resolve(false);
        clear();
      }, timeout || 60 * 1000);
      this.authStateManager.subscribe(handler);
      this.authStateManager.updateAuthState();
    });
  }

  async getUser() {
    const {
      idToken,
      accessToken
    } = this.authStateManager.getAuthState();
    return this.token.getUserInfo(accessToken, idToken);
  }

  getIdToken() {
    const {
      idToken
    } = this.authStateManager.getAuthState();
    return idToken ? idToken.idToken : undefined;
  }

  getAccessToken() {
    const {
      accessToken
    } = this.authStateManager.getAuthState();
    return accessToken ? accessToken.accessToken : undefined;
  }

  getRefreshToken() {
    const {
      refreshToken
    } = this.authStateManager.getAuthState();
    return refreshToken ? refreshToken.refreshToken : undefined;
  }
  /**
   * Store parsed tokens from redirect url
   */


  async storeTokensFromRedirect() {
    const {
      tokens
    } = await this.token.parseFromUrl();
    this.tokenManager.setTokens(tokens);
  }

  setOriginalUri(originalUri) {
    // Use current location if originalUri was not passed
    originalUri = originalUri || window.location.href; // Store originalUri

    const storage = _browserStorage.default.getSessionStorage();

    storage.setItem(_constants.REFERRER_PATH_STORAGE_KEY, originalUri);
  }

  getOriginalUri() {
    const storage = _browserStorage.default.getSessionStorage();

    const originalUri = storage.getItem(_constants.REFERRER_PATH_STORAGE_KEY) || window.location.origin;
    return originalUri;
  }

  removeOriginalUri() {
    const storage = _browserStorage.default.getSessionStorage();

    storage.removeItem(_constants.REFERRER_PATH_STORAGE_KEY);
  }

  isLoginRedirect() {
    return (0, _oauthUtil.isLoginRedirect)(this);
  }

  async handleLoginRedirect(tokens) {
    const handleRedirect = async ({
      isPending
    }) => {
      if (isPending) {
        return;
      } // Unsubscribe listener


      this.authStateManager.unsubscribe(handleRedirect); // Get and clear originalUri from storage

      const originalUri = this.getOriginalUri();
      this.removeOriginalUri(); // Redirect to originalUri

      const {
        restoreOriginalUri
      } = this.options;

      if (restoreOriginalUri) {
        await restoreOriginalUri(this, originalUri);
      } else {
        window.location.replace(originalUri);
      }
    }; // Handle redirect after authState is updated 


    this.authStateManager.subscribe(handleRedirect); // Store tokens and update AuthState by the emitted events

    if (tokens) {
      this.tokenManager.setTokens(tokens);
    } else if (this.isLoginRedirect()) {
      await this.storeTokensFromRedirect();
    } else {
      this.authStateManager.unsubscribe(handleRedirect);
    }
  }

  isPKCE() {
    return !!this.options.pkce;
  }

  hasResponseType(responseType) {
    let hasResponseType = false;

    if (Array.isArray(this.options.responseType) && this.options.responseType.length) {
      hasResponseType = this.options.responseType.indexOf(responseType) >= 0;
    } else {
      hasResponseType = this.options.responseType === responseType;
    }

    return hasResponseType;
  }

  isAuthorizationCodeFlow() {
    return this.hasResponseType('code');
  }

} // Hoist feature detection functions to static type


OktaAuthBrowser.features = OktaAuthBrowser.prototype.features = features;
var _default = OktaAuthBrowser;
exports.default = _default;
module.exports = exports.default;