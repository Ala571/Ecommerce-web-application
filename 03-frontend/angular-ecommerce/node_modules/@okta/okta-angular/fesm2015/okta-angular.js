import { __awaiter, __decorate, __param, __metadata } from 'tslib';
import { InjectionToken, Injectable, Inject, Optional, Component, Injector, NgModule } from '@angular/core';
import { Router, NavigationStart } from '@angular/router';
import { Location } from '@angular/common';
import { OktaAuth, isAbsoluteUrl, toAbsoluteUrl, toRelativeUrl } from '@okta/okta-auth-js';
import { Observable } from 'rxjs';
import { filter } from 'rxjs/operators';

/*
 * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */
const OKTA_CONFIG = new InjectionToken('okta.config.angular');

var packageInfo = {
    'name': '@okta/okta-angular',
    'version': '3.0.1'
};

/*
 * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */
let OktaAuthService = class OktaAuthService extends OktaAuth {
    constructor(config, location, router) {
        // If a relative `redirectUri` was passed, convert to absolute URL, including base href, if any.
        if (config.redirectUri && !isAbsoluteUrl(config.redirectUri) && location) {
            const baseUri = window.location.origin + location.prepareExternalUrl('');
            config.redirectUri = toAbsoluteUrl(config.redirectUri, baseUri);
        }
        const transformAuthState = (oktaAuth, authState) => __awaiter(this, void 0, void 0, function* () {
            // if `isAuthenticated` was set on config, call it now to override the value of `authState.isAuthenticated`
            if (config.isAuthenticated) {
                authState.isAuthenticated = yield config.isAuthenticated(this);
            }
            // if `transformAuthState` was set on config, call it now to transform the authState object
            if (config.transformAuthState) {
                authState = yield config.transformAuthState(oktaAuth, authState);
            }
            return authState;
        });
        // If a router is available, provide a default implementation of `restoreOriginalUri`
        const restoreOriginalUri = (!config.restoreOriginalUri && router && location) ? (oktaAuth, originalUri) => __awaiter(this, void 0, void 0, function* () {
            const baseUrl = window.location.origin + location.prepareExternalUrl('');
            const routePath = toRelativeUrl(originalUri, baseUrl);
            return router.navigateByUrl(routePath);
        }) : config.restoreOriginalUri;
        const options = Object.assign({
            transformAuthState,
            restoreOriginalUri
        }, config);
        super(options);
        this.config = config;
        this.location = location;
        // Customize user agent
        this.userAgent = `${packageInfo.name}/${packageInfo.version} ${this.userAgent}`;
        // Initialize observers
        this.observers = [];
        this.$authenticationState = new Observable((observer) => { this.observers.push(observer); });
        this.authStateManager.subscribe((authState) => {
            this.emitAuthenticationState(!!authState.isAuthenticated);
        });
        if (!this.token.isLoginRedirect()) {
            // Trigger an initial change event to make sure authState is latest
            this.authStateManager.updateAuthState();
        }
    }
    emitAuthenticationState(state) {
        return __awaiter(this, void 0, void 0, function* () {
            this.observers.forEach(observer => observer.next(state));
        });
    }
    signInWithRedirect(options = {}) {
        const _super = Object.create(null, {
            signInWithRedirect: { get: () => super.signInWithRedirect }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const originalUri = options.originalUri || this.getOriginalUri();
            if (!originalUri) {
                // Default to the app base as a relative path.
                options.originalUri = '/';
            }
            return _super.signInWithRedirect.call(this, options);
        });
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any,@typescript-eslint/explicit-module-boundary-types
    signOut(options) {
        const _super = Object.create(null, {
            signOut: { get: () => super.signOut }
        });
        return __awaiter(this, void 0, void 0, function* () {
            options = options || {};
            const postLogoutRedirectUri = options.postLogoutRedirectUri || this.options.postLogoutRedirectUri;
            if (!postLogoutRedirectUri && this.location) {
                // Default to the app base as an absolute URL, including base href, if any.
                options.postLogoutRedirectUri = window.location.origin + this.location.prepareExternalUrl('/'); // include trailing slash
            }
            return _super.signOut.call(this, options);
        });
    }
    /**
     * Returns the configuration object used.
     */
    getOktaConfig() {
        return this.config;
    }
};
OktaAuthService = __decorate([
    Injectable(),
    __param(0, Inject(OKTA_CONFIG)), __param(1, Optional()), __param(2, Optional()),
    __metadata("design:paramtypes", [Object, Location, Router])
], OktaAuthService);

/*
 * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */
let OktaCallbackComponent = class OktaCallbackComponent {
    constructor(okta, router) {
        this.okta = okta;
        this.router = router;
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                // Parse code or tokens from the URL, store tokens in the TokenManager, and redirect back to the originalUri
                yield this.okta.handleLoginRedirect();
            }
            catch (e) {
                this.error = e.toString();
            }
        });
    }
};
OktaCallbackComponent = __decorate([
    Component({
        template: `<div>{{error}}</div>`
    }),
    __metadata("design:paramtypes", [OktaAuthService, Router])
], OktaCallbackComponent);

/*
 * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */
let OktaLoginRedirectComponent = class OktaLoginRedirectComponent {
    constructor(okta) {
        this.okta = okta;
    }
    ngOnInit() {
        const originalUri = this.okta.getOriginalUri();
        if (!originalUri) {
            this.okta.setOriginalUri('/');
        }
        this.okta.signInWithRedirect();
    }
};
OktaLoginRedirectComponent = __decorate([
    Component({ template: `` }),
    __metadata("design:paramtypes", [OktaAuthService])
], OktaLoginRedirectComponent);

/*
 * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */
let OktaAuthGuard = class OktaAuthGuard {
    constructor(oktaAuth, injector) {
        this.oktaAuth = oktaAuth;
        this.injector = injector;
        this.updateAuthStateListener = (authState) => {
            if (!authState.isAuthenticated) {
                this.handleLogin(this.state.url);
            }
        };
        // Unsubscribe updateAuthStateListener when route change
        const router = injector.get(Router);
        router.events.pipe(filter((e) => e instanceof NavigationStart && this.state && this.state.url !== e.url)).subscribe(() => {
            this.oktaAuth.authStateManager.unsubscribe(this.updateAuthStateListener);
        });
    }
    /**
     * Gateway for protected route. Returns true if there is a valid accessToken,
     * otherwise it will cache the route and start the login flow.
     * @param route
     * @param state
     */
    canActivate(route, state) {
        return __awaiter(this, void 0, void 0, function* () {
            // Track states for current route
            this.route = route;
            this.state = state;
            // Protect the route after accessing
            this.oktaAuth.authStateManager.subscribe(this.updateAuthStateListener);
            const isAuthenticated = yield this.oktaAuth.isAuthenticated();
            if (isAuthenticated) {
                return true;
            }
            yield this.handleLogin(state.url);
            return false;
        });
    }
    canActivateChild(route, state) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.canActivate(route, state);
        });
    }
    handleLogin(fromUri) {
        return __awaiter(this, void 0, void 0, function* () {
            // Get the operation to perform on failed authentication from
            // either the global config or route data injection.
            const onAuthRequired = this.route.data['onAuthRequired'] || this.oktaAuth.getOktaConfig().onAuthRequired;
            // Store the current path
            this.oktaAuth.setOriginalUri(fromUri);
            if (onAuthRequired) {
                onAuthRequired(this.oktaAuth, this.injector);
            }
            else {
                this.oktaAuth.signInWithRedirect();
            }
        });
    }
};
OktaAuthGuard = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [OktaAuthService, Injector])
], OktaAuthGuard);

function createOktaService(config, location, router) {
    return new OktaAuthService(config, location, router);
}

/*
 * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */
const ɵ0 = createOktaService;
let OktaAuthModule = class OktaAuthModule {
};
OktaAuthModule = __decorate([
    NgModule({
        declarations: [
            OktaCallbackComponent,
            OktaLoginRedirectComponent,
        ],
        exports: [
            OktaCallbackComponent,
            OktaLoginRedirectComponent,
        ],
        providers: [
            OktaAuthGuard,
            {
                provide: OktaAuthService,
                useFactory: ɵ0,
                deps: [
                    OKTA_CONFIG,
                    Location,
                    Router // optional
                ]
            }
        ]
    })
], OktaAuthModule);

export { OKTA_CONFIG, OktaAuthGuard, OktaAuthModule, OktaAuthService, OktaCallbackComponent, OktaLoginRedirectComponent, createOktaService as ɵa };
//# sourceMappingURL=okta-angular.js.map
