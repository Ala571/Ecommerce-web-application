{"version":3,"file":"okta.guard.js","sourceRoot":"","sources":["../../../src/okta/okta.guard.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;GAUG;;AAEH,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAC;AACrD,OAAO,EAKL,MAAM,EACN,eAAe,EAChB,MAAM,iBAAiB,CAAC;AACzB,OAAO,EAAE,MAAM,EAAE,MAAM,gBAAgB,CAAC;AAIxC,OAAO,EAAE,eAAe,EAAE,MAAM,yBAAyB,CAAC;AAI1D;IAIE,uBAAoB,QAAyB,EAAU,QAAkB;QAAzE,iBAQC;QARmB,aAAQ,GAAR,QAAQ,CAAiB;QAAU,aAAQ,GAAR,QAAQ,CAAU;QAuDjE,4BAAuB,GAAG,UAAC,SAAoB;YACrD,IAAI,CAAC,SAAS,CAAC,eAAe,EAAE;gBAC9B,KAAI,CAAC,WAAW,CAAC,KAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;aAClC;QACH,CAAC,CAAC;QA1DA,wDAAwD;QACxD,IAAM,MAAM,GAAG,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACpC,MAAM,CAAC,MAAM,CAAC,IAAI,CAChB,MAAM,CAAC,UAAC,CAAQ,IAAK,OAAA,CAAC,YAAY,eAAe,IAAI,KAAI,CAAC,KAAK,IAAI,KAAI,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,EAAtE,CAAsE,CAAC,CAC7F,CAAC,SAAS,CAAC;YACV,KAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,WAAW,CAAC,KAAI,CAAC,uBAAuB,CAAC,CAAC;QAC3E,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;;OAKG;IACG,mCAAW,GAAjB,UAAkB,KAA6B,EAAE,KAA0B;;;;;;wBACzE,iCAAiC;wBACjC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;wBACnB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;wBAEnB,oCAAoC;wBACpC,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,SAAS,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;wBAC/C,qBAAM,IAAI,CAAC,QAAQ,CAAC,eAAe,EAAE,EAAA;;wBAAvD,eAAe,GAAG,SAAqC;wBAC7D,IAAI,eAAe,EAAE;4BACnB,sBAAO,IAAI,EAAC;yBACb;wBAED,qBAAM,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;wBAAjC,SAAiC,CAAC;wBAElC,sBAAO,KAAK,EAAC;;;;KACd;IAEK,wCAAgB,GAAtB,UACE,KAA6B,EAC7B,KAA0B;;;gBAE1B,sBAAO,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,KAAK,CAAC,EAAC;;;KACvC;IAEa,mCAAW,GAAzB,UAA0B,OAAe;;;;gBAGjC,cAAc,GAAyB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,CAAC,cAAc,CAAC;gBAE/H,yBAAyB;gBACzB,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;gBAEtC,IAAI,cAAc,EAAE;oBAClB,cAAc,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;iBAC9C;qBAAM;oBACL,IAAI,CAAC,QAAQ,CAAC,kBAAkB,EAAE,CAAC;iBACpC;;;;KACF;IAzDU,aAAa;QADzB,UAAU,EAAE;iDAKmB,eAAe,EAAoB,QAAQ;OAJ9D,aAAa,CAiEzB;IAAD,oBAAC;CAAA,AAjED,IAiEC;SAjEY,aAAa","sourcesContent":["/*\n * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { Injectable, Injector } from '@angular/core';\nimport {\n  CanActivate,\n  CanActivateChild,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n  Router,\n  NavigationStart\n} from '@angular/router';\nimport { filter } from 'rxjs/operators';\n\nimport { AuthState } from '@okta/okta-auth-js';\n\nimport { OktaAuthService } from './services/okta.service';\nimport { AuthRequiredFunction } from './models/okta.config';\n\n@Injectable()\nexport class OktaAuthGuard implements CanActivate, CanActivateChild {\n  private route: ActivatedRouteSnapshot;\n  private state: RouterStateSnapshot;\n\n  constructor(private oktaAuth: OktaAuthService, private injector: Injector) { \n    // Unsubscribe updateAuthStateListener when route change\n    const router = injector.get(Router);\n    router.events.pipe(\n      filter((e: Event) => e instanceof NavigationStart && this.state && this.state.url !== e.url)\n    ).subscribe(() => {\n      this.oktaAuth.authStateManager.unsubscribe(this.updateAuthStateListener);\n    });\n  }\n\n  /**\n   * Gateway for protected route. Returns true if there is a valid accessToken,\n   * otherwise it will cache the route and start the login flow.\n   * @param route\n   * @param state\n   */\n  async canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Promise<boolean> {\n    // Track states for current route\n    this.route = route;\n    this.state = state;\n\n    // Protect the route after accessing\n    this.oktaAuth.authStateManager.subscribe(this.updateAuthStateListener);\n    const isAuthenticated = await this.oktaAuth.isAuthenticated();\n    if (isAuthenticated) {\n      return true;\n    }\n\n    await this.handleLogin(state.url);\n\n    return false;\n  }\n\n  async canActivateChild(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Promise<boolean> {\n    return this.canActivate(route, state);\n  }\n\n  private async handleLogin(fromUri: string): Promise<void> {\n     // Get the operation to perform on failed authentication from\n     // either the global config or route data injection.\n    const onAuthRequired: AuthRequiredFunction = this.route.data['onAuthRequired'] || this.oktaAuth.getOktaConfig().onAuthRequired;\n    \n    // Store the current path\n    this.oktaAuth.setOriginalUri(fromUri);\n\n    if (onAuthRequired) {\n      onAuthRequired(this.oktaAuth, this.injector);\n    } else {\n      this.oktaAuth.signInWithRedirect();\n    }\n  }\n\n  private updateAuthStateListener = (authState: AuthState) => {\n    if (!authState.isAuthenticated) {\n      this.handleLogin(this.state.url);\n    }\n  };\n\n}\n"]}