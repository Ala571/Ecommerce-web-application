{"version":3,"file":"okta.service.js","sourceRoot":"","sources":["../../../../src/okta/services/okta.service.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { Inject, Injectable, Optional } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { OKTA_CONFIG, OktaConfig } from '../models/okta.config';\n\n// eslint-disable-next-line node/no-unpublished-import\nimport packageInfo from '../packageInfo';\n\n/**\n * Import the okta-auth-js library\n */\nimport {\n  OktaAuth,\n  AuthState,\n  OktaAuthOptions,\n  isAbsoluteUrl,\n  toAbsoluteUrl,\n  toRelativeUrl,\n  SigninWithRedirectOptions\n} from '@okta/okta-auth-js';\n\nimport { Observable, Observer } from 'rxjs';\nimport { Location } from '@angular/common';\n\n@Injectable()\nexport class OktaAuthService extends OktaAuth {\n    private config: OktaConfig;\n    private observers: Observer<boolean>[];\n    private location?: Location;\n\n    $authenticationState: Observable<boolean>;\n\n    constructor(@Inject(OKTA_CONFIG) config: OktaConfig, @Optional() location?: Location, @Optional() router?: Router) {\n\n      // If a relative `redirectUri` was passed, convert to absolute URL, including base href, if any.\n      if (config.redirectUri && !isAbsoluteUrl(config.redirectUri) && location) {\n        const baseUri = window.location.origin + location.prepareExternalUrl('');\n        config.redirectUri = toAbsoluteUrl(config.redirectUri, baseUri);\n      }\n\n      const transformAuthState = async (oktaAuth: OktaAuth, authState: AuthState) => {\n        // if `isAuthenticated` was set on config, call it now to override the value of `authState.isAuthenticated`\n        if (config.isAuthenticated) {\n          authState.isAuthenticated = await config.isAuthenticated(this);\n        }\n        // if `transformAuthState` was set on config, call it now to transform the authState object\n        if (config.transformAuthState) {\n          authState = await config.transformAuthState(oktaAuth, authState);\n        }\n        return authState;\n      };\n      \n      // If a router is available, provide a default implementation of `restoreOriginalUri`\n      const restoreOriginalUri = (!config.restoreOriginalUri && router && location) ? async (oktaAuth: OktaAuth, originalUri: string) => {\n        const baseUrl = window.location.origin + location.prepareExternalUrl('');\n        const routePath = toRelativeUrl(originalUri, baseUrl);\n        return router.navigateByUrl(routePath);\n      } : config.restoreOriginalUri;\n\n      const options: OktaAuthOptions = Object.assign({\n        transformAuthState,\n        restoreOriginalUri\n      }, config);\n\n      super(options);\n\n      this.config = config;\n      this.location = location;\n\n      // Customize user agent\n      this.userAgent = `${packageInfo.name}/${packageInfo.version} ${this.userAgent}`;\n\n      // Initialize observers\n      this.observers = [];\n      this.$authenticationState = new Observable((observer: Observer<boolean>) => { this.observers.push(observer); });\n\n      this.authStateManager.subscribe((authState: AuthState) => {\n        this.emitAuthenticationState(!!authState.isAuthenticated);\n      });\n      if (!this.token.isLoginRedirect()) {\n        // Trigger an initial change event to make sure authState is latest\n        this.authStateManager.updateAuthState();\n      }\n    }\n\n    private async emitAuthenticationState(state: boolean) {\n      this.observers.forEach(observer => observer.next(state));\n    }\n\n    async signInWithRedirect(options: SigninWithRedirectOptions = {}): Promise<void> {\n      const originalUri = options.originalUri || this.getOriginalUri();\n      if (!originalUri) {\n        // Default to the app base as a relative path.\n        options.originalUri = '/';\n      }\n      return super.signInWithRedirect(options);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any,@typescript-eslint/explicit-module-boundary-types\n    async signOut(options?: any): Promise<void> {\n      options = options || {};\n      const postLogoutRedirectUri = options.postLogoutRedirectUri || this.options.postLogoutRedirectUri;\n      if (!postLogoutRedirectUri && this.location) {\n        // Default to the app base as an absolute URL, including base href, if any.\n        options.postLogoutRedirectUri = window.location.origin + this.location.prepareExternalUrl('/'); // include trailing slash\n      }\n      return super.signOut(options);\n    }\n\n    /**\n     * Returns the configuration object used.\n     */\n    getOktaConfig(): OktaConfig {\n      return this.config;\n    }\n\n}\n"]}