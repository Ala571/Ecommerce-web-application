/*
 * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */
import * as tslib_1 from "tslib";
import { Inject, Injectable, Optional } from '@angular/core';
import { Router } from '@angular/router';
import { OKTA_CONFIG } from '../models/okta.config';
// eslint-disable-next-line node/no-unpublished-import
import packageInfo from '../packageInfo';
/**
 * Import the okta-auth-js library
 */
import { OktaAuth, isAbsoluteUrl, toAbsoluteUrl, toRelativeUrl } from '@okta/okta-auth-js';
import { Observable } from 'rxjs';
import { Location } from '@angular/common';
var OktaAuthService = /** @class */ (function (_super) {
    tslib_1.__extends(OktaAuthService, _super);
    function OktaAuthService(config, location, router) {
        var _this = this;
        // If a relative `redirectUri` was passed, convert to absolute URL, including base href, if any.
        if (config.redirectUri && !isAbsoluteUrl(config.redirectUri) && location) {
            var baseUri = window.location.origin + location.prepareExternalUrl('');
            config.redirectUri = toAbsoluteUrl(config.redirectUri, baseUri);
        }
        var transformAuthState = function (oktaAuth, authState) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!config.isAuthenticated) return [3 /*break*/, 2];
                        _a = authState;
                        return [4 /*yield*/, config.isAuthenticated(this)];
                    case 1:
                        _a.isAuthenticated = _b.sent();
                        _b.label = 2;
                    case 2:
                        if (!config.transformAuthState) return [3 /*break*/, 4];
                        return [4 /*yield*/, config.transformAuthState(oktaAuth, authState)];
                    case 3:
                        authState = _b.sent();
                        _b.label = 4;
                    case 4: return [2 /*return*/, authState];
                }
            });
        }); };
        // If a router is available, provide a default implementation of `restoreOriginalUri`
        var restoreOriginalUri = (!config.restoreOriginalUri && router && location) ? function (oktaAuth, originalUri) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var baseUrl, routePath;
            return tslib_1.__generator(this, function (_a) {
                baseUrl = window.location.origin + location.prepareExternalUrl('');
                routePath = toRelativeUrl(originalUri, baseUrl);
                return [2 /*return*/, router.navigateByUrl(routePath)];
            });
        }); } : config.restoreOriginalUri;
        var options = Object.assign({
            transformAuthState: transformAuthState,
            restoreOriginalUri: restoreOriginalUri
        }, config);
        _this = _super.call(this, options) || this;
        _this.config = config;
        _this.location = location;
        // Customize user agent
        _this.userAgent = packageInfo.name + "/" + packageInfo.version + " " + _this.userAgent;
        // Initialize observers
        _this.observers = [];
        _this.$authenticationState = new Observable(function (observer) { _this.observers.push(observer); });
        _this.authStateManager.subscribe(function (authState) {
            _this.emitAuthenticationState(!!authState.isAuthenticated);
        });
        if (!_this.token.isLoginRedirect()) {
            // Trigger an initial change event to make sure authState is latest
            _this.authStateManager.updateAuthState();
        }
        return _this;
    }
    OktaAuthService.prototype.emitAuthenticationState = function (state) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                this.observers.forEach(function (observer) { return observer.next(state); });
                return [2 /*return*/];
            });
        });
    };
    OktaAuthService.prototype.signInWithRedirect = function (options) {
        if (options === void 0) { options = {}; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var originalUri;
            return tslib_1.__generator(this, function (_a) {
                originalUri = options.originalUri || this.getOriginalUri();
                if (!originalUri) {
                    // Default to the app base as a relative path.
                    options.originalUri = '/';
                }
                return [2 /*return*/, _super.prototype.signInWithRedirect.call(this, options)];
            });
        });
    };
    // eslint-disable-next-line @typescript-eslint/no-explicit-any,@typescript-eslint/explicit-module-boundary-types
    OktaAuthService.prototype.signOut = function (options) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var postLogoutRedirectUri;
            return tslib_1.__generator(this, function (_a) {
                options = options || {};
                postLogoutRedirectUri = options.postLogoutRedirectUri || this.options.postLogoutRedirectUri;
                if (!postLogoutRedirectUri && this.location) {
                    // Default to the app base as an absolute URL, including base href, if any.
                    options.postLogoutRedirectUri = window.location.origin + this.location.prepareExternalUrl('/'); // include trailing slash
                }
                return [2 /*return*/, _super.prototype.signOut.call(this, options)];
            });
        });
    };
    /**
     * Returns the configuration object used.
     */
    OktaAuthService.prototype.getOktaConfig = function () {
        return this.config;
    };
    OktaAuthService = tslib_1.__decorate([
        Injectable(),
        tslib_1.__param(0, Inject(OKTA_CONFIG)), tslib_1.__param(1, Optional()), tslib_1.__param(2, Optional()),
        tslib_1.__metadata("design:paramtypes", [Object, Location, Router])
    ], OktaAuthService);
    return OktaAuthService;
}(OktaAuth));
export { OktaAuthService };
//# sourceMappingURL=okta.service.js.map