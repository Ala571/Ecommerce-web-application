/*
 * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */
import * as tslib_1 from "tslib";
import { Injectable, Injector } from '@angular/core';
import { Router, NavigationStart } from '@angular/router';
import { filter } from 'rxjs/operators';
import { OktaAuthService } from './services/okta.service';
var OktaAuthGuard = /** @class */ (function () {
    function OktaAuthGuard(oktaAuth, injector) {
        var _this = this;
        this.oktaAuth = oktaAuth;
        this.injector = injector;
        this.updateAuthStateListener = function (authState) {
            if (!authState.isAuthenticated) {
                _this.handleLogin(_this.state.url);
            }
        };
        // Unsubscribe updateAuthStateListener when route change
        var router = injector.get(Router);
        router.events.pipe(filter(function (e) { return e instanceof NavigationStart && _this.state && _this.state.url !== e.url; })).subscribe(function () {
            _this.oktaAuth.authStateManager.unsubscribe(_this.updateAuthStateListener);
        });
    }
    /**
     * Gateway for protected route. Returns true if there is a valid accessToken,
     * otherwise it will cache the route and start the login flow.
     * @param route
     * @param state
     */
    OktaAuthGuard.prototype.canActivate = function (route, state) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var isAuthenticated;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // Track states for current route
                        this.route = route;
                        this.state = state;
                        // Protect the route after accessing
                        this.oktaAuth.authStateManager.subscribe(this.updateAuthStateListener);
                        return [4 /*yield*/, this.oktaAuth.isAuthenticated()];
                    case 1:
                        isAuthenticated = _a.sent();
                        if (isAuthenticated) {
                            return [2 /*return*/, true];
                        }
                        return [4 /*yield*/, this.handleLogin(state.url)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, false];
                }
            });
        });
    };
    OktaAuthGuard.prototype.canActivateChild = function (route, state) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, this.canActivate(route, state)];
            });
        });
    };
    OktaAuthGuard.prototype.handleLogin = function (fromUri) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var onAuthRequired;
            return tslib_1.__generator(this, function (_a) {
                onAuthRequired = this.route.data['onAuthRequired'] || this.oktaAuth.getOktaConfig().onAuthRequired;
                // Store the current path
                this.oktaAuth.setOriginalUri(fromUri);
                if (onAuthRequired) {
                    onAuthRequired(this.oktaAuth, this.injector);
                }
                else {
                    this.oktaAuth.signInWithRedirect();
                }
                return [2 /*return*/];
            });
        });
    };
    OktaAuthGuard = tslib_1.__decorate([
        Injectable(),
        tslib_1.__metadata("design:paramtypes", [OktaAuthService, Injector])
    ], OktaAuthGuard);
    return OktaAuthGuard;
}());
export { OktaAuthGuard };
//# sourceMappingURL=okta.guard.js.map