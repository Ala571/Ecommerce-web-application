/*
 * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */
import * as tslib_1 from "tslib";
import { Injectable, Injector } from '@angular/core';
import { Router, NavigationStart } from '@angular/router';
import { filter } from 'rxjs/operators';
import { OktaAuthService } from './services/okta.service';
let OktaAuthGuard = class OktaAuthGuard {
    constructor(oktaAuth, injector) {
        this.oktaAuth = oktaAuth;
        this.injector = injector;
        this.updateAuthStateListener = (authState) => {
            if (!authState.isAuthenticated) {
                this.handleLogin(this.state.url);
            }
        };
        // Unsubscribe updateAuthStateListener when route change
        const router = injector.get(Router);
        router.events.pipe(filter((e) => e instanceof NavigationStart && this.state && this.state.url !== e.url)).subscribe(() => {
            this.oktaAuth.authStateManager.unsubscribe(this.updateAuthStateListener);
        });
    }
    /**
     * Gateway for protected route. Returns true if there is a valid accessToken,
     * otherwise it will cache the route and start the login flow.
     * @param route
     * @param state
     */
    canActivate(route, state) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            // Track states for current route
            this.route = route;
            this.state = state;
            // Protect the route after accessing
            this.oktaAuth.authStateManager.subscribe(this.updateAuthStateListener);
            const isAuthenticated = yield this.oktaAuth.isAuthenticated();
            if (isAuthenticated) {
                return true;
            }
            yield this.handleLogin(state.url);
            return false;
        });
    }
    canActivateChild(route, state) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return this.canActivate(route, state);
        });
    }
    handleLogin(fromUri) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            // Get the operation to perform on failed authentication from
            // either the global config or route data injection.
            const onAuthRequired = this.route.data['onAuthRequired'] || this.oktaAuth.getOktaConfig().onAuthRequired;
            // Store the current path
            this.oktaAuth.setOriginalUri(fromUri);
            if (onAuthRequired) {
                onAuthRequired(this.oktaAuth, this.injector);
            }
            else {
                this.oktaAuth.signInWithRedirect();
            }
        });
    }
};
OktaAuthGuard = tslib_1.__decorate([
    Injectable(),
    tslib_1.__metadata("design:paramtypes", [OktaAuthService, Injector])
], OktaAuthGuard);
export { OktaAuthGuard };
//# sourceMappingURL=okta.guard.js.map