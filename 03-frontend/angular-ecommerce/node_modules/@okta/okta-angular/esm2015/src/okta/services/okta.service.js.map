{"version":3,"file":"okta.service.js","sourceRoot":"","sources":["../../../package/src/okta/services/okta.service.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { Inject, Injectable, Optional } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { OKTA_CONFIG, OktaConfig } from '../models/okta.config';\n\n// eslint-disable-next-line node/no-unpublished-import\nimport packageInfo from '../packageInfo';\n\n/**\n * Import the okta-auth-js library\n */\nimport {\n  OktaAuth,\n  AuthState,\n  OktaAuthOptions,\n  isAbsoluteUrl,\n  toAbsoluteUrl,\n  toRelativeUrl,\n  SigninWithRedirectOptions\n} from '@okta/okta-auth-js';\n\nimport { Observable, Observer } from 'rxjs';\nimport { Location } from '@angular/common';\n\n@Injectable()\nexport class OktaAuthService extends OktaAuth {\n    private config: OktaConfig;\n    private observers: Observer<boolean>[];\n    private location?: Location;\n\n    $authenticationState: Observable<boolean>;\n\n    constructor(@Inject(OKTA_CONFIG) config: OktaConfig, @Optional() location?: Location, @Optional() router?: Router) {\n\n      // If a relative `redirectUri` was passed, convert to absolute URL, including base href, if any.\n      if (config.redirectUri && !isAbsoluteUrl(config.redirectUri) && location) {\n        const baseUri = window.location.origin + location.prepareExternalUrl('');\n        config.redirectUri = toAbsoluteUrl(config.redirectUri, baseUri);\n      }\n\n      const transformAuthState = async (oktaAuth: OktaAuth, authState: AuthState) => {\n        // if `isAuthenticated` was set on config, call it now to override the value of `authState.isAuthenticated`\n        if (config.isAuthenticated) {\n          authState.isAuthenticated = await config.isAuthenticated(this);\n        }\n        // if `transformAuthState` was set on config, call it now to transform the authState object\n        if (config.transformAuthState) {\n          authState = await config.transformAuthState(oktaAuth, authState);\n        }\n        return authState;\n      };\n      \n      // If a router is available, provide a default implementation of `restoreOriginalUri`\n      const restoreOriginalUri = (!config.restoreOriginalUri && router && location) ? async (oktaAuth: OktaAuth, originalUri: string) => {\n        const baseUrl = window.location.origin + location.prepareExternalUrl('');\n        const routePath = toRelativeUrl(originalUri, baseUrl);\n        return router.navigateByUrl(routePath);\n      } : config.restoreOriginalUri;\n\n      const options: OktaAuthOptions = Object.assign({\n        transformAuthState,\n        restoreOriginalUri\n      }, config);\n\n      super(options);\n\n      this.config = config;\n      this.location = location;\n\n      // Customize user agent\n      this.userAgent = `${packageInfo.name}/${packageInfo.version} ${this.userAgent}`;\n\n      // Initialize observers\n      this.observers = [];\n      this.$authenticationState = new Observable((observer: Observer<boolean>) => { this.observers.push(observer); });\n\n      this.authStateManager.subscribe((authState: AuthState) => {\n        this.emitAuthenticationState(!!authState.isAuthenticated);\n      });\n      if (!this.token.isLoginRedirect()) {\n        // Trigger an initial change event to make sure authState is latest\n        this.authStateManager.updateAuthState();\n      }\n    }\n\n    private async emitAuthenticationState(state: boolean) {\n      this.observers.forEach(observer => observer.next(state));\n    }\n\n    async signInWithRedirect(options: SigninWithRedirectOptions = {}): Promise<void> {\n      const originalUri = options.originalUri || this.getOriginalUri();\n      if (!originalUri) {\n        // Default to the app base as a relative path.\n        options.originalUri = '/';\n      }\n      return super.signInWithRedirect(options);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any,@typescript-eslint/explicit-module-boundary-types\n    async signOut(options?: any): Promise<void> {\n      options = options || {};\n      const postLogoutRedirectUri = options.postLogoutRedirectUri || this.options.postLogoutRedirectUri;\n      if (!postLogoutRedirectUri && this.location) {\n        // Default to the app base as an absolute URL, including base href, if any.\n        options.postLogoutRedirectUri = window.location.origin + this.location.prepareExternalUrl('/'); // include trailing slash\n      }\n      return super.signOut(options);\n    }\n\n    /**\n     * Returns the configuration object used.\n     */\n    getOktaConfig(): OktaConfig {\n      return this.config;\n    }\n\n}\n"]}