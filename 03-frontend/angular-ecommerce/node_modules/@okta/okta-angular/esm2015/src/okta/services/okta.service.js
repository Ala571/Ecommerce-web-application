/*
 * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */
import * as tslib_1 from "tslib";
import { Inject, Injectable, Optional } from '@angular/core';
import { Router } from '@angular/router';
import { OKTA_CONFIG } from '../models/okta.config';
// eslint-disable-next-line node/no-unpublished-import
import packageInfo from '../packageInfo';
/**
 * Import the okta-auth-js library
 */
import { OktaAuth, isAbsoluteUrl, toAbsoluteUrl, toRelativeUrl } from '@okta/okta-auth-js';
import { Observable } from 'rxjs';
import { Location } from '@angular/common';
let OktaAuthService = class OktaAuthService extends OktaAuth {
    constructor(config, location, router) {
        // If a relative `redirectUri` was passed, convert to absolute URL, including base href, if any.
        if (config.redirectUri && !isAbsoluteUrl(config.redirectUri) && location) {
            const baseUri = window.location.origin + location.prepareExternalUrl('');
            config.redirectUri = toAbsoluteUrl(config.redirectUri, baseUri);
        }
        const transformAuthState = (oktaAuth, authState) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            // if `isAuthenticated` was set on config, call it now to override the value of `authState.isAuthenticated`
            if (config.isAuthenticated) {
                authState.isAuthenticated = yield config.isAuthenticated(this);
            }
            // if `transformAuthState` was set on config, call it now to transform the authState object
            if (config.transformAuthState) {
                authState = yield config.transformAuthState(oktaAuth, authState);
            }
            return authState;
        });
        // If a router is available, provide a default implementation of `restoreOriginalUri`
        const restoreOriginalUri = (!config.restoreOriginalUri && router && location) ? (oktaAuth, originalUri) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            const baseUrl = window.location.origin + location.prepareExternalUrl('');
            const routePath = toRelativeUrl(originalUri, baseUrl);
            return router.navigateByUrl(routePath);
        }) : config.restoreOriginalUri;
        const options = Object.assign({
            transformAuthState,
            restoreOriginalUri
        }, config);
        super(options);
        this.config = config;
        this.location = location;
        // Customize user agent
        this.userAgent = `${packageInfo.name}/${packageInfo.version} ${this.userAgent}`;
        // Initialize observers
        this.observers = [];
        this.$authenticationState = new Observable((observer) => { this.observers.push(observer); });
        this.authStateManager.subscribe((authState) => {
            this.emitAuthenticationState(!!authState.isAuthenticated);
        });
        if (!this.token.isLoginRedirect()) {
            // Trigger an initial change event to make sure authState is latest
            this.authStateManager.updateAuthState();
        }
    }
    emitAuthenticationState(state) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.observers.forEach(observer => observer.next(state));
        });
    }
    signInWithRedirect(options = {}) {
        const _super = Object.create(null, {
            signInWithRedirect: { get: () => super.signInWithRedirect }
        });
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const originalUri = options.originalUri || this.getOriginalUri();
            if (!originalUri) {
                // Default to the app base as a relative path.
                options.originalUri = '/';
            }
            return _super.signInWithRedirect.call(this, options);
        });
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any,@typescript-eslint/explicit-module-boundary-types
    signOut(options) {
        const _super = Object.create(null, {
            signOut: { get: () => super.signOut }
        });
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            options = options || {};
            const postLogoutRedirectUri = options.postLogoutRedirectUri || this.options.postLogoutRedirectUri;
            if (!postLogoutRedirectUri && this.location) {
                // Default to the app base as an absolute URL, including base href, if any.
                options.postLogoutRedirectUri = window.location.origin + this.location.prepareExternalUrl('/'); // include trailing slash
            }
            return _super.signOut.call(this, options);
        });
    }
    /**
     * Returns the configuration object used.
     */
    getOktaConfig() {
        return this.config;
    }
};
OktaAuthService = tslib_1.__decorate([
    Injectable(),
    tslib_1.__param(0, Inject(OKTA_CONFIG)), tslib_1.__param(1, Optional()), tslib_1.__param(2, Optional()),
    tslib_1.__metadata("design:paramtypes", [Object, Location, Router])
], OktaAuthService);
export { OktaAuthService };
//# sourceMappingURL=okta.service.js.map