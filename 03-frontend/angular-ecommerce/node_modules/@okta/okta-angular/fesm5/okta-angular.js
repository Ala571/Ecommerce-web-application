import { __extends, __awaiter, __generator, __decorate, __param, __metadata } from 'tslib';
import { InjectionToken, Injectable, Inject, Optional, Component, Injector, NgModule } from '@angular/core';
import { Router, NavigationStart } from '@angular/router';
import { Location } from '@angular/common';
import { isAbsoluteUrl, toAbsoluteUrl, toRelativeUrl, OktaAuth } from '@okta/okta-auth-js';
import { Observable } from 'rxjs';
import { filter } from 'rxjs/operators';

/*
 * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */
var OKTA_CONFIG = new InjectionToken('okta.config.angular');

var packageInfo = {
    'name': '@okta/okta-angular',
    'version': '3.0.1'
};

/*
 * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */
var OktaAuthService = /** @class */ (function (_super) {
    __extends(OktaAuthService, _super);
    function OktaAuthService(config, location, router) {
        var _this = this;
        // If a relative `redirectUri` was passed, convert to absolute URL, including base href, if any.
        if (config.redirectUri && !isAbsoluteUrl(config.redirectUri) && location) {
            var baseUri = window.location.origin + location.prepareExternalUrl('');
            config.redirectUri = toAbsoluteUrl(config.redirectUri, baseUri);
        }
        var transformAuthState = function (oktaAuth, authState) { return __awaiter(_this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!config.isAuthenticated) return [3 /*break*/, 2];
                        _a = authState;
                        return [4 /*yield*/, config.isAuthenticated(this)];
                    case 1:
                        _a.isAuthenticated = _b.sent();
                        _b.label = 2;
                    case 2:
                        if (!config.transformAuthState) return [3 /*break*/, 4];
                        return [4 /*yield*/, config.transformAuthState(oktaAuth, authState)];
                    case 3:
                        authState = _b.sent();
                        _b.label = 4;
                    case 4: return [2 /*return*/, authState];
                }
            });
        }); };
        // If a router is available, provide a default implementation of `restoreOriginalUri`
        var restoreOriginalUri = (!config.restoreOriginalUri && router && location) ? function (oktaAuth, originalUri) { return __awaiter(_this, void 0, void 0, function () {
            var baseUrl, routePath;
            return __generator(this, function (_a) {
                baseUrl = window.location.origin + location.prepareExternalUrl('');
                routePath = toRelativeUrl(originalUri, baseUrl);
                return [2 /*return*/, router.navigateByUrl(routePath)];
            });
        }); } : config.restoreOriginalUri;
        var options = Object.assign({
            transformAuthState: transformAuthState,
            restoreOriginalUri: restoreOriginalUri
        }, config);
        _this = _super.call(this, options) || this;
        _this.config = config;
        _this.location = location;
        // Customize user agent
        _this.userAgent = packageInfo.name + "/" + packageInfo.version + " " + _this.userAgent;
        // Initialize observers
        _this.observers = [];
        _this.$authenticationState = new Observable(function (observer) { _this.observers.push(observer); });
        _this.authStateManager.subscribe(function (authState) {
            _this.emitAuthenticationState(!!authState.isAuthenticated);
        });
        if (!_this.token.isLoginRedirect()) {
            // Trigger an initial change event to make sure authState is latest
            _this.authStateManager.updateAuthState();
        }
        return _this;
    }
    OktaAuthService.prototype.emitAuthenticationState = function (state) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.observers.forEach(function (observer) { return observer.next(state); });
                return [2 /*return*/];
            });
        });
    };
    OktaAuthService.prototype.signInWithRedirect = function (options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var originalUri;
            return __generator(this, function (_a) {
                originalUri = options.originalUri || this.getOriginalUri();
                if (!originalUri) {
                    // Default to the app base as a relative path.
                    options.originalUri = '/';
                }
                return [2 /*return*/, _super.prototype.signInWithRedirect.call(this, options)];
            });
        });
    };
    // eslint-disable-next-line @typescript-eslint/no-explicit-any,@typescript-eslint/explicit-module-boundary-types
    OktaAuthService.prototype.signOut = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var postLogoutRedirectUri;
            return __generator(this, function (_a) {
                options = options || {};
                postLogoutRedirectUri = options.postLogoutRedirectUri || this.options.postLogoutRedirectUri;
                if (!postLogoutRedirectUri && this.location) {
                    // Default to the app base as an absolute URL, including base href, if any.
                    options.postLogoutRedirectUri = window.location.origin + this.location.prepareExternalUrl('/'); // include trailing slash
                }
                return [2 /*return*/, _super.prototype.signOut.call(this, options)];
            });
        });
    };
    /**
     * Returns the configuration object used.
     */
    OktaAuthService.prototype.getOktaConfig = function () {
        return this.config;
    };
    OktaAuthService = __decorate([
        Injectable(),
        __param(0, Inject(OKTA_CONFIG)), __param(1, Optional()), __param(2, Optional()),
        __metadata("design:paramtypes", [Object, Location, Router])
    ], OktaAuthService);
    return OktaAuthService;
}(OktaAuth));

/*
 * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */
var OktaCallbackComponent = /** @class */ (function () {
    function OktaCallbackComponent(okta, router) {
        this.okta = okta;
        this.router = router;
    }
    OktaCallbackComponent.prototype.ngOnInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            var e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        // Parse code or tokens from the URL, store tokens in the TokenManager, and redirect back to the originalUri
                        return [4 /*yield*/, this.okta.handleLoginRedirect()];
                    case 1:
                        // Parse code or tokens from the URL, store tokens in the TokenManager, and redirect back to the originalUri
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        e_1 = _a.sent();
                        this.error = e_1.toString();
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    OktaCallbackComponent = __decorate([
        Component({
            template: "<div>{{error}}</div>"
        }),
        __metadata("design:paramtypes", [OktaAuthService, Router])
    ], OktaCallbackComponent);
    return OktaCallbackComponent;
}());

/*
 * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */
var OktaLoginRedirectComponent = /** @class */ (function () {
    function OktaLoginRedirectComponent(okta) {
        this.okta = okta;
    }
    OktaLoginRedirectComponent.prototype.ngOnInit = function () {
        var originalUri = this.okta.getOriginalUri();
        if (!originalUri) {
            this.okta.setOriginalUri('/');
        }
        this.okta.signInWithRedirect();
    };
    OktaLoginRedirectComponent = __decorate([
        Component({ template: "" }),
        __metadata("design:paramtypes", [OktaAuthService])
    ], OktaLoginRedirectComponent);
    return OktaLoginRedirectComponent;
}());

/*
 * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */
var OktaAuthGuard = /** @class */ (function () {
    function OktaAuthGuard(oktaAuth, injector) {
        var _this = this;
        this.oktaAuth = oktaAuth;
        this.injector = injector;
        this.updateAuthStateListener = function (authState) {
            if (!authState.isAuthenticated) {
                _this.handleLogin(_this.state.url);
            }
        };
        // Unsubscribe updateAuthStateListener when route change
        var router = injector.get(Router);
        router.events.pipe(filter(function (e) { return e instanceof NavigationStart && _this.state && _this.state.url !== e.url; })).subscribe(function () {
            _this.oktaAuth.authStateManager.unsubscribe(_this.updateAuthStateListener);
        });
    }
    /**
     * Gateway for protected route. Returns true if there is a valid accessToken,
     * otherwise it will cache the route and start the login flow.
     * @param route
     * @param state
     */
    OktaAuthGuard.prototype.canActivate = function (route, state) {
        return __awaiter(this, void 0, void 0, function () {
            var isAuthenticated;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // Track states for current route
                        this.route = route;
                        this.state = state;
                        // Protect the route after accessing
                        this.oktaAuth.authStateManager.subscribe(this.updateAuthStateListener);
                        return [4 /*yield*/, this.oktaAuth.isAuthenticated()];
                    case 1:
                        isAuthenticated = _a.sent();
                        if (isAuthenticated) {
                            return [2 /*return*/, true];
                        }
                        return [4 /*yield*/, this.handleLogin(state.url)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, false];
                }
            });
        });
    };
    OktaAuthGuard.prototype.canActivateChild = function (route, state) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.canActivate(route, state)];
            });
        });
    };
    OktaAuthGuard.prototype.handleLogin = function (fromUri) {
        return __awaiter(this, void 0, void 0, function () {
            var onAuthRequired;
            return __generator(this, function (_a) {
                onAuthRequired = this.route.data['onAuthRequired'] || this.oktaAuth.getOktaConfig().onAuthRequired;
                // Store the current path
                this.oktaAuth.setOriginalUri(fromUri);
                if (onAuthRequired) {
                    onAuthRequired(this.oktaAuth, this.injector);
                }
                else {
                    this.oktaAuth.signInWithRedirect();
                }
                return [2 /*return*/];
            });
        });
    };
    OktaAuthGuard = __decorate([
        Injectable(),
        __metadata("design:paramtypes", [OktaAuthService, Injector])
    ], OktaAuthGuard);
    return OktaAuthGuard;
}());

function createOktaService(config, location, router) {
    return new OktaAuthService(config, location, router);
}

/*
 * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */
var ɵ0 = createOktaService;
var OktaAuthModule = /** @class */ (function () {
    function OktaAuthModule() {
    }
    OktaAuthModule = __decorate([
        NgModule({
            declarations: [
                OktaCallbackComponent,
                OktaLoginRedirectComponent,
            ],
            exports: [
                OktaCallbackComponent,
                OktaLoginRedirectComponent,
            ],
            providers: [
                OktaAuthGuard,
                {
                    provide: OktaAuthService,
                    useFactory: ɵ0,
                    deps: [
                        OKTA_CONFIG,
                        Location,
                        Router // optional
                    ]
                }
            ]
        })
    ], OktaAuthModule);
    return OktaAuthModule;
}());

export { OKTA_CONFIG, OktaAuthGuard, OktaAuthModule, OktaAuthService, OktaCallbackComponent, OktaLoginRedirectComponent, createOktaService as ɵa };
//# sourceMappingURL=okta-angular.js.map
